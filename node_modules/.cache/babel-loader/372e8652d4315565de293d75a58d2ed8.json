{"ast":null,"code":"var _jsxFileName = \"/Users/johnphilip/projects/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [employeesLoading, setEmployeesLoading] = useState(false);\n  const [transactionsLoading, setTransactionsLoading] = useState(false);\n  const [currentEmployeeId, setCurrentEmployeeId] = useState(\"all\");\n  const [moreTransactions, setMoreTransactions] = useState(true);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setTransactionsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await paginatedTransactionsUtils.fetchAll();\n    setMoreTransactions((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) != null);\n    setTransactionsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, setMoreTransactions]);\n  const loadAllEmployees = useCallback(async () => {\n    setEmployeesLoading(true);\n    await employeeUtils.fetchAll();\n    setEmployeesLoading(false);\n  }, [employeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setMoreTransactions((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) != null);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, setMoreTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n      loadAllEmployees();\n    }\n  }, [employeeUtils.loading, employees, loadAllEmployees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          setCurrentEmployeeId(newValue.id);\n          await loadTransactionsByEmployee(newValue.id);\n\n          if (newValue.id === \"all\") {\n            await loadAllTransactions();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), moreTransactions && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || transactionsLoading,\n          onClick: async () => {\n            if (currentEmployeeId === \"all\") {\n              await loadAllTransactions();\n            } else {\n              await loadTransactionsByEmployee(currentEmployeeId);\n            }\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YAyrsaONqpyklEPPptmJR7kJ4+c=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","employeesLoading","setEmployeesLoading","transactionsLoading","setTransactionsLoading","currentEmployeeId","setCurrentEmployeeId","moreTransactions","setMoreTransactions","transactions","loadAllTransactions","invalidateData","fetchAll","nextPage","loadAllEmployees","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/johnphilip/projects/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [employeesLoading, setEmployeesLoading] = useState(false)\n  const [transactionsLoading, setTransactionsLoading] = useState(false)\n  const [currentEmployeeId, setCurrentEmployeeId] = useState(\"all\");\n  const [moreTransactions, setMoreTransactions] = useState(true);\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setTransactionsLoading(true)\n\n    transactionsByEmployeeUtils.invalidateData()\n\n    await paginatedTransactionsUtils.fetchAll()\n\n    setMoreTransactions(paginatedTransactions?.nextPage != null)\n\n    setTransactionsLoading(false)\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, setMoreTransactions])\n\n  const loadAllEmployees = useCallback(async () => {\n    setEmployeesLoading(true)\n\n    await employeeUtils.fetchAll()\n\n    setEmployeesLoading(false)\n  }, [employeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n\n      setMoreTransactions(paginatedTransactions?.nextPage != null)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, setMoreTransactions]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n      loadAllEmployees()\n    }\n  }, [employeeUtils.loading, employees,loadAllEmployees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            setCurrentEmployeeId(newValue.id)\n            await loadTransactionsByEmployee(newValue.id)\n\n            if (newValue.id === \"all\"){\n              await loadAllTransactions()\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {moreTransactions && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || transactionsLoading}\n              onClick={async () => {\n                if (currentEmployeeId === \"all\"){\n                  await loadAllTransactions()\n                } else {\n                  await loadTransactionsByEmployee(currentEmployeeId)\n                }\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}